(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{18:function(n,e,t){"use strict";t.r(e);e.default='\n/**\n * Custom properties as a dictionary.\n */\ndeclare const codeData: {[key: string]: any};\n\n/**\n * Custom properties as a dictionary.\n */\ndeclare const customProperties: typeof codeData\n\n/**\n * Represent panel data loading state.\n */\ndeclare enum LoadingState {\n  NotStarted = "NotStarted",\n  Loading = "Loading",\n  Streaming = "Streaming",\n  Done = "Done",\n  Error = "Error",\n}\n\ninterface DataQueryTimings {\n  dataProcessingTime: number;\n}\n\ndeclare enum DataQueryErrorType {\n  Cancelled = "cancelled",\n  Timeout = "timeout",\n  Unknown = "unknown",\n}\n\ninterface DataQueryError {\n  data?: {\n    message?: string;\n    error?: string;\n  };\n  message?: string;\n  status?: string;\n  statusText?: string;\n  refId?: string;\n  type?: DataQueryErrorType;\n}\n\ninterface PanelData {\n  /** State of the data (loading, done, error, streaming) */\n  state: LoadingState;\n  /** Contains data frames with field overrides applied */\n  series: DataFrame[];\n  /** Request contains the queries and properties sent to the datasource */\n  request?: DataQueryRequest;\n  /** Timing measurements */\n  timings?: DataQueryTimings;\n  /** Any query errors */\n  error?: DataQueryError;\n  /** Contains the range from the request or a shifted time range if a request uses relative time */\n  timeRange: TimeRange;\n}\n\n/**\n * Result set of panel queries\n * https://grafana.com/docs/grafana/latest/packages_api/data/paneldata/.\n */\ndeclare const data: PanelData;\n\ninterface QueryResultBase {\n  /**\n   * Matches the query target refId\n   */\n  refId?: string;\n  /**\n   * Used by some backend data sources to communicate back info about the execution (generated sql, timing)\n   */\n  meta?: { [key: string]: any };\n}\n\ndeclare enum FieldType {\n  time = "time",\n  number = "number",\n  string = "string",\n  boolean = "boolean",\n  trace = "trace",\n  other = "other",\n}\n\ndeclare enum NullValueMode {\n  Null = "null",\n  Ignore = "connected",\n  AsZero = "null as zero",\n}\n\n/**\n * Callback info for DataLink click events\n */\ninterface DataLinkClickEvent<T = any> {\n  origin: T;\n  scopedVars: ScopedVars;\n  e?: any;\n}\n\ninterface DataLink<T extends DataQuery = any> {\n  title: string;\n  targetBlank?: boolean;\n  url: string;\n  onBuildUrl?: (event: DataLinkClickEvent) => string;\n  onClick?: (event: DataLinkClickEvent) => void;\n  internal?: {\n    query: T;\n    datasourceUid: string;\n  };\n}\n\ninterface FieldConfig<TOptions extends object = any> {\n  displayName?: string;\n  filterable?: boolean;\n  unit?: string;\n  decimals?: number | null;\n  min?: number | null;\n  max?: number | null;\n  mappings?: ValueMapping[];\n  thresholds?: ThresholdsConfig;\n  color?: FieldColor;\n  nullValueMode?: NullValueMode;\n  links?: DataLink[];\n  noValue?: string;\n  custom?: TOptions;\n}\n\ntype FieldCalcs = Record<string, any>;\n\ninterface FieldState {\n  /**\n   * An appropriate name for the field (does not include frame info)\n   */\n  displayName?: string | null;\n  /**\n   * Cache of reduced values\n   */\n  calcs?: FieldCalcs;\n  /**\n   * Appropriate values for templating\n   */\n  scopedVars?: ScopedVars;\n}\n\ninterface FormattedValue {\n  text: string;\n  prefix?: string;\n  suffix?: string;\n}\n\ninterface DisplayValue extends FormattedValue {\n  /**\n   *  Use isNaN to check if it is a real number\n   */\n  numeric: number;\n  /**\n   *  0-1 between min & max\n   */\n  percent?: number;\n  /**\n   *  Color based on configs or Threshold\n   */\n  color?: string;\n  title?: string;\n}\n\ndeclare type DisplayProcessor = (value: any) => DisplayValue;\n\ninterface ValueLinkConfig {\n  /**\n   * Result of field reduction\n   */\n  calculatedValue?: DisplayValue;\n  /**\n   * Index of the value row within Field. Should be provided only when value is not a result of a reduction\n   */\n  valueRowIndex?: number;\n}\n\ndeclare type LinkTarget = "_blank" | "_self" | undefined;\n\n/**\n * Processed Link Model. The values are ready to use\n */\ninterface LinkModel<T = any> {\n  href: string;\n  title: string;\n  target: LinkTarget;\n  origin: T;\n  onClick?: (e: any) => void;\n}\n\ninterface Vector<T = any> {\n  length: number;\n  /**\n   * Access the value by index (Like an array)\n   */\n  get(index: number): T;\n  /**\n   * Get the results as an array.\n   */\n  toArray(): T[];\n}\n\ninterface Field<T = any, V = Vector<T>> {\n  /**\n   * Name of the field (column)\n   */\n  name: string;\n  /**\n   *  Field value type (string, number, etc)\n   */\n  type: FieldType;\n  /**\n   *  Meta info about how field and how to display it\n   */\n  config: FieldConfig;\n  values: V;\n  labels?: { [key: string]: string };\n  /**\n   * Cached values with appropriate display and id values\n   */\n  state?: FieldState | null;\n  /**\n   * Convert text to the field value\n   */\n  parse?: (value: any) => T;\n  /**\n   * Convert a value for display\n   */\n  display?: DisplayProcessor;\n  /**\n   * Get value data links with variables interpolated\n   */\n  getLinks?: (config: ValueLinkConfig) => Array<LinkModel<Field>>;\n}\n\ninterface DataFrame extends QueryResultBase {\n  name?: string;\n  fields: Field[];\n  length: number;\n}\n\ninterface DataQuery {\n  /**\n   * A - Z\n   */\n  refId: string;\n  /**\n   * true if query is disabled (ie should not be returned to the dashboard)\n   */\n  hide?: boolean;\n  /**\n   * Unique, guid like, string used in explore mode\n   */\n  key?: string;\n  /**\n   * Specify the query flavor\n   */\n  queryType?: string;\n  /**\n   * For mixed data sources the selected datasource is on the query level.\n   * For non mixed scenarios this is undefined.\n   */\n  datasource?: string | null;\n}\n\ndeclare enum CoreApp {\n  Dashboard = "dashboard",\n  Explore = "explore",\n}\n\ndeclare enum ExploreMode {\n  Logs = "Logs",\n  Metrics = "Metrics",\n  Tracing = "Tracing",\n}\n\ninterface DataQueryRequest<TQuery extends DataQuery = DataQuery> {\n  requestId: string;\n  interval: string;\n  intervalMs: number;\n  maxDataPoints?: number;\n  range: TimeRange;\n  reverse?: boolean;\n  scopedVars: ScopedVars;\n  targets: TQuery[];\n  timezone: string;\n  app: CoreApp | string;\n  cacheTimeout?: string;\n  exploreMode?: ExploreMode;\n  rangeRaw?: RawTimeRange;\n  timeInfo?: string;\n  panelId?: number;\n  dashboardId?: number;\n  startTime: number;\n  endTime?: number;\n  liveStreaming?: boolean;\n  showingGraph?: boolean;\n  showingTable?: boolean;\n}\n\ninterface EventFilterOptions {\n  onlyLocal: boolean;\n}\n\ninterface BusEventHandler<T extends BusEvent> {\n  (event: T): void;\n}\n\ninterface BusEventType<T extends BusEvent> {\n  type: string;\n  new (...args: any[]): T;\n}\n\ninterface BusEvent {\n  readonly type: string;\n  readonly payload?: any;\n  readonly origin?: EventBus;\n}\n\ninterface EventBus {\n  /**\n   * Publish single vent\n   */\n  publish<T extends BusEvent>(event: T): void;\n  /**\n   * Get observable of events\n   */\n  getStream<T extends BusEvent>(eventType: BusEventType<T>): Observable<T>;\n  /**\n   * Subscribe to an event stream\n   *\n   * This function is a wrapper around the `getStream(...)` function\n   */\n  subscribe<T extends BusEvent>(eventType: BusEventType<T>, handler: BusEventHandler<T>): Unsubscribable;\n  /**\n   * Remove all event subscriptions\n   */\n  removeAllListeners(): void;\n  /**\n   * Returns a new bus scoped that knows where it exists in a heiarchy\n   *\n   * @internal -- This is included for internal use only should not be used directly\n   */\n  newScopedBus(key: string, filter: EventFilterOptions): EventBus;\n}\n\ndeclare enum FieldColorMode {\n  Thresholds = "thresholds",\n  Scheme = "scheme",\n  Fixed = "fixed",\n}\ninterface FieldColor {\n  mode: FieldColorMode;\n  schemeName?: ColorScheme;\n  fixedColor?: string;\n}\ndeclare enum ColorScheme {\n  BrBG = "BrBG",\n  PRGn = "PRGn",\n  PiYG = "PiYG",\n  PuOr = "PuOr",\n  RdBu = "RdBu",\n  RdGy = "RdGy",\n  RdYlBu = "RdYlBu",\n  RdYlGn = "RdYlGn",\n  Spectral = "Spectral",\n  BuGn = "BuGn",\n  BuPu = "BuPu",\n  GnBu = "GnBu",\n  OrRd = "OrRd",\n  PuBuGn = "PuBuGn",\n  PuBu = "PuBu",\n  PuRd = "PuRd",\n  RdPu = "RdPu",\n  YlGnBu = "YlGnBu",\n  YlGn = "YlGn",\n  YlOrBr = "YlOrBr",\n  YlOrRd = "YlOrRd",\n  Blues = "Blues",\n  Greens = "Greens",\n  Greys = "Greys",\n  Purples = "Purples",\n  Reds = "Reds",\n  Oranges = "Oranges",\n}\n\ninterface SelectableValue<T = any> {\n  label?: string;\n  ariaLabel?: string;\n  value?: T;\n  imgUrl?: string;\n  icon?: string;\n  description?: string;\n  [key: string]: any;\n}\ninterface RegistrySelectInfo {\n  options: Array<SelectableValue<string>>;\n  current: Array<SelectableValue<string>>;\n}\ndeclare class Registry<T extends RegistryItem> {\n  private init?;\n  private ordered;\n  private byId;\n  private initialized;\n  constructor(init?: (() => T[]) | undefined);\n  setInit: (init: () => T[]) => void;\n  getIfExists(id: string | undefined): T | undefined;\n  private initialize;\n  get(id: string): T;\n  selectOptions(current?: string[], filter?: (ext: T) => boolean): RegistrySelectInfo;\n  /**\n   * Return a list of values by ID, or all values if not specified\n   */\n  list(ids?: any[]): T[];\n  isEmpty(): boolean;\n  register(ext: T): void;\n  private sort;\n}\n\ndeclare enum PluginState {\n  alpha = "alpha",\n  beta = "beta",\n  stable = "stable",\n  deprecated = "deprecated"\n}\n\ninterface RegistryItem {\n  id: string;\n  name: string;\n  description?: string;\n  aliasIds?: string[];\n  /**\n   * Some extensions should not be user selectable\n   *  like: \'all\' and \'any\' matchers;\n   */\n  excludeFromPicker?: boolean;\n  /**\n   * Optional feature state\n   */\n  state?: PluginState;\n}\n\ndeclare enum ReducerID {\n  sum = "sum",\n  max = "max",\n  min = "min",\n  logmin = "logmin",\n  mean = "mean",\n  last = "last",\n  first = "first",\n  count = "count",\n  range = "range",\n  diff = "diff",\n  diffperc = "diffperc",\n  delta = "delta",\n  step = "step",\n  firstNotNull = "firstNotNull",\n  lastNotNull = "lastNotNull",\n  changeCount = "changeCount",\n  distinctCount = "distinctCount",\n  allIsZero = "allIsZero",\n  allIsNull = "allIsNull",\n  allValues = "allValues"\n}\n\ndeclare type FieldReducer = (field: Field, ignoreNulls: boolean, nullAsZero: boolean) => FieldCalcs\n\ninterface FieldReducerInfo extends RegistryItem {\n  emptyInputResult?: any;\n  standard: boolean;\n  reduce?: FieldReducer;\n}\n\ndeclare abstract class FunctionalVector<T = any> implements Vector<T>, Iterable<T> {\n  abstract get length(): number;\n  abstract get(index: number): T;\n  iterator(): Generator<T, void, unknown>;\n  [Symbol.iterator](): Generator<T, void, unknown>;\n  forEach(iterator: (row: T) => void): void;\n  map<V>(transform: (item: T, index: number) => V): V[];\n  filter(predicate: (item: T) => boolean): T[];\n  toArray(): T[];\n  toJSON(): any;\n}\n\ndeclare class DataFrameView<T = any> extends FunctionalVector<T> {\n  private data;\n  private index;\n  private obj;\n  constructor(data: DataFrame);\n  get dataFrame(): DataFrame;\n  get length(): number;\n  /**\n   * Helper function to return the {@link DisplayProcessor} for a given field column.\n   * @param colIndex - the field column index for the data frame.\n   */\n  getFieldDisplayProcessor(colIndex: number): DisplayProcessor | undefined;\n  /**\n   * The contents of the object returned from this function\n   * are optimized for use in a loop. All calls return the same object\n   * but the index has changed.\n   *\n   * @example\n   * ```typescript\n   *   // `first`, `second` and `third` will all point to the same contents at index 2:\n   *   const first = view.get(0);\n   *   const second = view.get(1);\n   *   const third = view.get(2);\n   *\n   *   // If you need three different objects, consider something like:\n   *   const first = { ...view.get(0) };\n   *   const second = { ...view.get(1) };\n   *   const third = { ...view.get(2) };\n   * ```\n   * @param idx - The index of the object you currently are inspecting\n   */\n  get(idx: number): T;\n  toArray(): T[];\n}\n\ninterface MatcherConfig<TOptions = any> {\n  id: string;\n  options?: TOptions;\n}\ninterface DynamicConfigValue {\n  id: string;\n  value?: any;\n}\ninterface ConfigOverrideRule {\n  matcher: MatcherConfig;\n  properties: DynamicConfigValue[];\n}\n\ninterface ReduceDataOptions {\n  values?: boolean;\n  /** if showing all values limit */\n  limit?: number;\n  /** When !values, pick one value for the whole field */\n  calcs: string[];\n  /** Which fields to show.  By default this is only numeric fields */\n  fields?: string;\n}\n\n/**\n * Options for how to turn DataFrames into an array of display values\n */\ninterface ReduceDataOptions {\n  values?: boolean;\n  /** if showing all values limit */\n  limit?: number;\n  /** When !values, pick one value for the whole field */\n  calcs: string[];\n  /** Which fields to show.  By default this is only numeric fields */\n  fields?: string;\n}\ninterface FieldSparkline {\n  y: Field;\n  x?: Field;\n  timeRange?: TimeRange;\n  highlightIndex?: number;\n}\ninterface FieldDisplay {\n  name: string;\n  field: FieldConfig;\n  display: DisplayValue;\n  sparkline?: FieldSparkline;\n  view?: DataFrameView;\n  colIndex?: number;\n  rowIndex?: number;\n  getLinks?: () => LinkModel[];\n  hasLinks: boolean;\n}\ninterface GetFieldDisplayValuesOptions {\n  data?: DataFrame[];\n  reduceOptions: ReduceDataOptions;\n  fieldConfig: FieldConfigSource;\n  replaceVariables: InterpolateFunction;\n  sparkline?: boolean;\n  theme: GrafanaTheme2;\n  timeZone?: TimeZone;\n}\ninterface PopulatedGetFieldDisplayValuesOptions {\n  series?: GetFieldDisplayValuesOptions[\'data\'];\n  reduceOptions?: GetFieldDisplayValuesOptions[\'reduceOptions\'];\n  fieldConfig?: GetFieldDisplayValuesOptions[\'fieldConfig\'];\n  replaceVariables?: GetFieldDisplayValuesOptions[\'replaceVariables\'];\n  sparkline?: GetFieldDisplayValuesOptions[\'sparkline\'];\n  theme?: GetFieldDisplayValuesOptions[\'theme\'];\n  timeZone?: GetFieldDisplayValuesOptions[\'timeZone\'];\n}\n\n/**\n * Type to represent the value of a single query variable.\n *\n * @public\n */\ndeclare type UrlQueryValue =\n  | string\n  | number\n  | boolean\n  | string[]\n  | number[]\n  | boolean[]\n  | undefined\n  | null;\n/**\n * Type to represent the values parsed from the query string.\n *\n * @public\n */\ndeclare type UrlQueryMap = Record<string, UrlQueryValue>;\n\ninterface LocationUpdate {\n  /**\n   * Target path where you automatically wants to navigate the user.\n   */\n  path?: string;\n  /**\n   * Specify this value if you want to add values to the query string of the URL.\n   */\n  query?: UrlQueryMap;\n  /**\n   * If set to true, the query argument will be added to the existing URL.\n   */\n  partial?: boolean;\n  /**\n   * Used internally to sync the Redux state from Angular to make sure that the Redux location\n   * state is in sync when navigating using the Angular router.\n   *\n   * @remarks\n   * Do not change this unless you are the Angular router.\n   *\n   * @internal\n   */\n  routeParams?: UrlQueryMap;\n  replace?: boolean;\n}\n\n/**\n * If you need to automatically navigate the user to a new place in the application this should\n * be done via the LocationSrv and it will make sure to update the application state accordingly.\n *\n * @public\n */\ninterface LocationSrv {\n  update(options: LocationUpdate): void;\n}\n\n/**\n * Used to retrieve the {@link LocationSrv} that can be used to automatically navigate\n * the user to a new place in Grafana.\n *\n * @public\n */\ndeclare function getLocationSrv(): LocationSrv;\n\ndeclare type VariableType =\n  | "query"\n  | "adhoc"\n  | "constant"\n  | "datasource"\n  | "interval"\n  | "textbox"\n  | "custom"\n  | "system";\n\ninterface VariableModel {\n  type: VariableType;\n  name: string;\n  label: string | null;\n}\n\n/**\n * Via the TemplateSrv consumers get access to all the available template variables\n * that can be used within the current active dashboard.\n *\n * For a more in-depth description visit: https://grafana.com/docs/grafana/latest/reference/templating\n * @public\n */\ninterface TemplateSrv {\n  /**\n   * List the dashboard variables\n   */\n  getVariables(): VariableModel[];\n  /**\n   * Replace the values within the target string.  See also {@link InterpolateFunction}\n   */\n  replace(\n    target?: string,\n    scopedVars?: ScopedVars,\n    format?: string | Function\n  ): string;\n}\n\n/**\n * Used to retrieve the {@link TemplateSrv} that can be used to fetch available\n * template variables.\n *\n * @public\n */\ndeclare const getTemplateSrv: () => TemplateSrv;\n\ninterface HTMLNode extends ShadowRoot {\n  onpanelupdate: () => void;\n  onpanelwillunmount: () => void;\n}\n\n/**\n * The HTML node from the HTML/SVG code.\n *\n * It\'s a shadow root https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM.\n */\ndeclare const htmlNode: HTMLNode;\n\ninterface UnaryFunction<T, R> {\n  (source: T): R;\n}\ninterface OperatorFunction<T, R> extends UnaryFunction<Observable<T>, Observable<R>> {\n}\n\ninterface PromiseLike<T> {\n  /**\n   * Attaches callbacks for the resolution and/or rejection of the Promise.\n   * @param onfulfilled The callback to execute when the Promise is resolved.\n   * @param onrejected The callback to execute when the Promise is rejected.\n   * @returns A Promise for the completion of which ever callback is executed.\n   */\n  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): PromiseLike<TResult1 | TResult2>;\n}\n\ndeclare type PromiseConstructorLike = new <T>(executor: (resolve: (value: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>;\n\ninterface Unsubscribable {\n  unsubscribe(): void;\n}\n\ndeclare type TeardownLogic = Unsubscribable | Function | void;\n\ninterface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\ninterface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\ninterface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\ndeclare type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\ninterface Subscribable<T> {\n  subscribe(observer?: PartialObserver<T>): Unsubscribable;\n  /** @deprecated Use an observer instead of a complete callback */\n  subscribe(next: null | undefined, error: null | undefined, complete: () => void): Unsubscribable;\n  /** @deprecated Use an observer instead of an error callback */\n  subscribe(next: null | undefined, error: (error: any) => void, complete?: () => void): Unsubscribable;\n  /** @deprecated Use an observer instead of a complete callback */\n  subscribe(next: (value: T) => void, error: null | undefined, complete: () => void): Unsubscribable;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Unsubscribable;\n}\n\ndeclare class Observable<T> implements Subscribable<T> {\n  /** Internal implementation detail, do not use directly. */\n  _isScalar: boolean;\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic);\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   * @deprecated use new Observable() instead\n   */\n  static create: Function;\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable\'s operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R>;\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  /** @deprecated Use an observer instead of a complete callback */\n  subscribe(next: null | undefined, error: null | undefined, complete: () => void): Subscription;\n  /** @deprecated Use an observer instead of an error callback */\n  subscribe(next: null | undefined, error: (error: any) => void, complete?: () => void): Subscription;\n  /** @deprecated Use an observer instead of a complete callback */\n  subscribe(next: (value: T) => void, error: null | undefined, complete: () => void): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic;\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void>;\n  /** @internal This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic;\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from \'rxjs\';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from \'rxjs\';\n   */\n  static throw: typeof throwError;\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n}\n\ntype EditorCodeType = string | undefined;\n\ninterface OptionsInterface {\n  add100Percentage: boolean;\n  centerAlignContent: boolean;\n  SVGBaseFix: boolean;\n  rootCSS: EditorCodeType;\n  css: EditorCodeType;\n  html: EditorCodeType;\n  onRender: EditorCodeType;\n  onInit: EditorCodeType;\n  codeData: EditorCodeType;\n}\n\n/**\n * The panel options set.\n */\ndeclare const options: OptionsInterface;\n\ndeclare type InterpolateFunction = (value: string, scopedVars?: ScopedVars, format?: string | Function) => string;\n\ninterface FieldConfigSource<TOptions extends object = any> {\n  defaults: FieldConfig<TOptions>;\n  overrides: ConfigOverrideRule[];\n}\n\ninterface AbsoluteTimeRange {\n  from: number;\n  to: number;\n}\n\ndeclare enum NullValueMode {\n  Null = "null",\n  Ignore = "connected",\n  AsZero = "null as zero"\n}\n\ninterface FieldConfig<TOptions extends object = any> {\n  /**\n   * The display value for this field.  This supports template variables blank is auto\n   */\n  displayName?: string;\n  /**\n   * This can be used by data sources that return and explicit naming structure for values and labels\n   * When this property is configured, this value is used rather than the default naming strategy.\n   */\n  displayNameFromDS?: string;\n  /**\n   * Human readable field metadata\n   */\n  description?: string;\n  /**\n   * An explict path to the field in the datasource\n   *\n   * When defined, this value can be used as an identifier within the datasource scope, and\n   * may be used to update the results\n   */\n  path?: string;\n  /**\n   * True if data source can write a value to the path.  Auth/authz are supported separately\n   */\n  writeable?: boolean;\n  /**\n   * True if data source field supports ad-hoc filters\n   */\n  filterable?: boolean;\n  unit?: string;\n  decimals?: number | null;\n  min?: number | null;\n  max?: number | null;\n  mappings?: ValueMapping[];\n  thresholds?: ThresholdsConfig;\n  color?: FieldColor;\n  nullValueMode?: NullValueMode;\n  links?: DataLink[];\n  noValue?: string;\n  custom?: TOptions;\n}\n\ninterface PanelProps<T = any> {\n  /** ID of the panel within the current dashboard */\n  id: number;\n  /** Result set of panel queries */\n  data: PanelData;\n  /** Time range of the current dashboard */\n  timeRange: TimeRange;\n  /** Time zone of the current dashboard */\n  timeZone: TimeZone;\n  /** Panel options */\n  options: T;\n  /** Indicates whether or not panel should be rendered transparent */\n  transparent: boolean;\n  /** Current width of the panel */\n  width: number;\n  /** Current height of the panel */\n  height: number;\n  /** Field options configuration */\n  fieldConfig: FieldConfigSource;\n  /** @internal */\n  renderCounter: number;\n  /** Panel title */\n  title: string;\n  /** EventBus  */\n  eventBus: EventBus;\n  /** Panel options change handler */\n  onOptionsChange: (options: T) => void;\n  /** Field config change handler */\n  onFieldConfigChange: (config: FieldConfigSource) => void;\n  /** Template variables interpolation function */\n  replaceVariables: InterpolateFunction;\n  /** Time range change handler */\n  onChangeTimeRange: (timeRange: AbsoluteTimeRange) => void;\n}\n\ninterface ScopedVar<T = any> {\n  text: any;\n  value: T;\n  [key: string]: any;\n}\ninterface ScopedVars {\n  [key: string]: ScopedVar;\n}\n\ninterface SubscriptionLike extends Unsubscribable {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\ndeclare class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  static EMPTY: Subscription;\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  closed: boolean;\n  /** @internal */\n  protected _parentOrParents: Subscription | Subscription[];\n  /** @internal */\n  private _subscriptions;\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void);\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void;\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription. Can also be used to add a child subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * When a parent subscription is unsubscribed, any child subscriptions that were added to it are also unsubscribed.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription;\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void;\n}\n\ndeclare enum GrafanaThemeType {\n  Light = "light",\n  Dark = "dark",\n}\ninterface GrafanaThemeCommons {\n  name: string;\n  breakpoints: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n    xxl: string;\n  };\n  typography: {\n    fontFamily: {\n      sansSerif: string;\n      monospace: string;\n    };\n    size: {\n      base: string;\n      xs: string;\n      sm: string;\n      md: string;\n      lg: string;\n    };\n    weight: {\n      light: number;\n      regular: number;\n      semibold: number;\n      bold: number;\n    };\n    lineHeight: {\n      xs: number;\n      sm: number;\n      md: number;\n      lg: number;\n    };\n    heading: {\n      h1: string;\n      h2: string;\n      h3: string;\n      h4: string;\n      h5: string;\n      h6: string;\n    };\n    link: {\n      decoration: string;\n      hoverDecoration: string;\n    };\n  };\n  spacing: {\n    insetSquishMd: string;\n    d: string;\n    xxs: string;\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n    gutter: string;\n    formSpacingBase: number;\n    formMargin: string;\n    formFieldsetMargin: string;\n    formInputHeight: number;\n    formButtonHeight: number;\n    formInputPaddingHorizontal: string;\n    formInputAffixPaddingHorizontal: string;\n    formInputMargin: string;\n    formLabelPadding: string;\n    formLabelMargin: string;\n    formValidationMessagePadding: string;\n    formValidationMessageMargin: string;\n    inlineFormMargin: string;\n  };\n  border: {\n    radius: {\n      sm: string;\n      md: string;\n      lg: string;\n    };\n    width: {\n      sm: string;\n    };\n  };\n  height: {\n    sm: number;\n    md: number;\n    lg: number;\n  };\n  panelPadding: number;\n  panelHeaderHeight: number;\n  zIndex: {\n    dropdown: number;\n    navbarFixed: number;\n    sidemenu: number;\n    tooltip: number;\n    modalBackdrop: number;\n    modal: number;\n    typeahead: number;\n  };\n}\ninterface GrafanaTheme extends GrafanaThemeCommons {\n  type: GrafanaThemeType;\n  isDark: boolean;\n  isLight: boolean;\n  palette: {\n    black: string;\n    white: string;\n    dark1: string;\n    dark2: string;\n    dark3: string;\n    dark4: string;\n    dark5: string;\n    dark6: string;\n    dark7: string;\n    dark8: string;\n    dark9: string;\n    dark10: string;\n    gray1: string;\n    gray2: string;\n    gray3: string;\n    gray4: string;\n    gray5: string;\n    gray6: string;\n    gray7: string;\n    gray98: string;\n    gray95: string;\n    gray85: string;\n    gray70: string;\n    gray60: string;\n    gray33: string;\n    gray25: string;\n    gray15: string;\n    gray10: string;\n    gray05: string;\n    blue95: string;\n    blue85: string;\n    blue80: string;\n    blue77: string;\n    red88: string;\n    redBase: string;\n    redShade: string;\n    greenBase: string;\n    greenShade: string;\n    red: string;\n    yellow: string;\n    purple: string;\n    orange: string;\n    orangeDark: string;\n    queryRed: string;\n    queryGreen: string;\n    queryPurple: string;\n    queryOrange: string;\n    brandPrimary: string;\n    brandSuccess: string;\n    brandWarning: string;\n    brandDanger: string;\n    online: string;\n    warn: string;\n    critical: string;\n  };\n  colors: {\n    bg1: string;\n    bg2: string;\n    bg3: string;\n    border1: string;\n    border2: string;\n    border3: string;\n    bgBlue1: string;\n    bgBlue2: string;\n    dashboardBg: string;\n    bodyBg: string;\n    panelBg: string;\n    panelBorder: string;\n    pageHeaderBg: string;\n    pageHeaderBorder: string;\n    dropdownBg: string;\n    dropdownShadow: string;\n    dropdownOptionHoverBg: string;\n    link: string;\n    linkDisabled: string;\n    linkHover: string;\n    linkExternal: string;\n    textStrong: string;\n    textHeading: string;\n    text: string;\n    textSemiWeak: string;\n    textWeak: string;\n    textFaint: string;\n    textBlue: string;\n    formLabel: string;\n    formDescription: string;\n    formInputBg: string;\n    formInputBgDisabled: string;\n    formInputBorder: string;\n    formInputBorderHover: string;\n    formInputBorderActive: string;\n    formInputBorderInvalid: string;\n    formFocusOutline: string;\n    formInputText: string;\n    formInputDisabledText: string;\n    formInputPlaceholderText: string;\n    formValidationMessageText: string;\n    formValidationMessageBg: string;\n    formSwitchBg: string;\n    formSwitchBgActive: string;\n    formSwitchBgActiveHover: string;\n    formSwitchBgHover: string;\n    formSwitchBgDisabled: string;\n    formSwitchDot: string;\n    formCheckboxBgChecked: string;\n    formCheckboxBgCheckedHover: string;\n    formCheckboxCheckmark: string;\n  };\n  shadows: {\n    listItem: string;\n  };\n}\n\n/**\n * Grafana theme.\n * Here you can get the current theme, colors, sizes, ETC.\n *\n * https://grafana.com/docs/grafana/latest/packages_api/data/grafanatheme/\n */\ndeclare const theme: GrafanaTheme;\n\ndeclare type ThemeSpacingOptions = {\n  gridSize?: number;\n};\n/** @internal */\ndeclare type ThemeSpacingArgument = number | string;\n/**\n* @beta\n* The different signatures imply different meaning for their arguments that can\'t be expressed structurally.\n* We express the difference with variable names.\n* tslint:disable:unified-signatures */\ninterface ThemeSpacing {\n  (): string;\n  (value: number): string;\n  (topBottom: ThemeSpacingArgument, rightLeft: ThemeSpacingArgument): string;\n  (top: ThemeSpacingArgument, rightLeft: ThemeSpacingArgument, bottom: ThemeSpacingArgument): string;\n  (top: ThemeSpacingArgument, right: ThemeSpacingArgument, bottom: ThemeSpacingArgument, left: ThemeSpacingArgument): string;\n  gridSize: number;\n}\n\ndeclare const easing: {\n  easeInOut: string;\n  easeOut: string;\n  easeIn: string;\n  sharp: string;\n};\ndeclare const duration: {\n  shortest: number;\n  shorter: number;\n  short: number;\n  standard: number;\n  complex: number;\n  enteringScreen: number;\n  leavingScreen: number;\n};\n/** @alpha */\ninterface CreateTransitionOptions {\n  duration?: number | string;\n  easing?: string;\n  delay?: number | string;\n}\n/** @alpha */\ndeclare function create(props?: string | string[], options?: CreateTransitionOptions): string;\ndeclare function getAutoHeightDuration(height: number): number;\n/** @alpha */\ninterface ThemeTransitions {\n  create: typeof create;\n  duration: typeof duration;\n  easing: typeof easing;\n  getAutoHeightDuration: typeof getAutoHeightDuration;\n}\n\ninterface ThemeVisualizationColors {\n  /** Only for internal use by color schemes */\n  palette: string[];\n  /** Lookup the real color given the name */\n  getColorByName: (color: string) => string;\n  /** Colors organized by hue */\n  hues: ThemeVizHue[];\n}\n/**\n* @alpha\n*/\ninterface ThemeVizColor {\n  color: string;\n  name: string;\n  aliases?: string[];\n  primary?: boolean;\n}\n/**\n* @alpha\n*/\ninterface ThemeVizHue {\n  name: string;\n  shades: ThemeVizColor[];\n}\n\ninterface ThemeShadows {\n  z1: string;\n  z2: string;\n  z3: string;\n}\n\ndeclare const zIndex: {\n  navbarFixed: number;\n  sidemenu: number;\n  dropdown: number;\n  typeahead: number;\n  tooltip: number;\n  modalBackdrop: number;\n  modal: number;\n  portal: number;\n};\n/** @beta */\ndeclare type ThemeZIndices = typeof zIndex;\n\ninterface ThemeTypography {\n  fontFamily: string;\n  fontFamilyMonospace: string;\n  fontSize: number;\n  fontWeightLight: number;\n  fontWeightRegular: number;\n  fontWeightMedium: number;\n  fontWeightBold: number;\n  htmlFontSize?: number;\n  h1: ThemeTypographyVariant;\n  h2: ThemeTypographyVariant;\n  h3: ThemeTypographyVariant;\n  h4: ThemeTypographyVariant;\n  h5: ThemeTypographyVariant;\n  h6: ThemeTypographyVariant;\n  body: ThemeTypographyVariant;\n  bodySmall: ThemeTypographyVariant;\n  /**\n   * @deprecated\n   * from legacy old theme\n   * */\n  size: {\n      base: string;\n      xs: string;\n      sm: string;\n      md: string;\n      lg: string;\n  };\n  pxToRem: (px: number) => string;\n}\ninterface ThemeTypographyVariant {\n  fontSize: string;\n  fontWeight: number;\n  lineHeight: number;\n  fontFamily: string;\n  letterSpacing?: string;\n}\n\ninterface ThemeComponents {\n  /** Applies to normal buttons, inputs, radio buttons, etc */\n  height: {\n      sm: number;\n      md: number;\n      lg: number;\n  };\n  input: {\n      background: string;\n      borderColor: string;\n      borderHover: string;\n      text: string;\n  };\n  tooltip: {\n      text: string;\n      background: string;\n  };\n  panel: {\n      padding: number;\n      headerHeight: number;\n      borderColor: string;\n      boxShadow: string;\n      background: string;\n  };\n  dropdown: {\n      background: string;\n  };\n  overlay: {\n      background: string;\n  };\n  dashboard: {\n      background: string;\n      padding: number;\n  };\n  sidemenu: {\n      width: number;\n  };\n}\n\ninterface ThemeShape {\n  borderRadius: (amount?: number) => string;\n}\n\n/** @beta */\ninterface ThemeBreakpointValues {\n    xs: number;\n    sm: number;\n    md: number;\n    lg: number;\n    xl: number;\n    xxl: number;\n}\n/** @beta */\ndeclare type ThemeBreakpointsKey = keyof ThemeBreakpointValues;\n/** @beta */\ninterface ThemeBreakpoints {\n    values: ThemeBreakpointValues;\n    keys: string[];\n    unit: string;\n    up: (key: ThemeBreakpointsKey) => string;\n    down: (key: ThemeBreakpointsKey) => string;\n}\n/** @internal */\n\ndeclare type ThemeColorsMode = \'light\' | \'dark\';\n\ninterface ThemeColorsBase<TColor> {\n  mode: ThemeColorsMode;\n  primary: TColor;\n  secondary: TColor;\n  info: TColor;\n  error: TColor;\n  success: TColor;\n  warning: TColor;\n  text: {\n      primary: string;\n      secondary: string;\n      disabled: string;\n      link: string;\n      /** Used for auto white or dark text on colored backgrounds */\n      maxContrast: string;\n  };\n  background: {\n      /** Dashboard and body background */\n      canvas: string;\n      /** Primary content pane background (panels etc) */\n      primary: string;\n      /** Cards and elements that need to stand out on the primary background */\n      secondary: string;\n  };\n  border: {\n      weak: string;\n      medium: string;\n      strong: string;\n  };\n  gradients: {\n      brandVertical: string;\n      brandHorizontal: string;\n  };\n  action: {\n      /** Used for selected menu item / select option */\n      selected: string;\n      /** Used for hovered menu item / select option */\n      hover: string;\n      /** Used for button/colored background hover opacity */\n      hoverOpacity: number;\n      /** Used focused menu item / select option */\n      focus: string;\n      /** Used for disabled buttons and inputs */\n      disabledBackground: string;\n      /** Disabled text */\n      disabledText: string;\n      /** Disablerd opacity */\n      disabledOpacity: number;\n  };\n  hoverFactor: number;\n  contrastThreshold: number;\n  tonalOffset: number;\n}\n\ninterface ThemeColors extends ThemeColorsBase<ThemeRichColor> {\n  /** Returns a text color for the background */\n  getContrastText(background: string, threshold?: number): string;\n  emphasize(color: string, amount?: number): string;\n}\n\ninterface ThemeRichColor {\n  /** color intent (primary, secondary, info, error, etc) */\n  name: string;\n  /** Main color */\n  main: string;\n  /** Used for hover */\n  shade: string;\n  /** Used for text */\n  text: string;\n  /** Used for borders */\n  border: string;\n  /** Used subtly colored backgrounds */\n  transparent: string;\n  /** Text color for text ontop of main */\n  contrastText: string;\n}\n\n/**\n * @beta\n * Next gen theme model introduced in Grafana v8.\n */\ninterface GrafanaTheme2 {\n  name: string;\n  isDark: boolean;\n  isLight: boolean;\n  colors: ThemeColors;\n  breakpoints: ThemeBreakpoints;\n  spacing: ThemeSpacing;\n  shape: ThemeShape;\n  components: ThemeComponents;\n  typography: ThemeTypography;\n  zIndex: ThemeZIndices;\n  shadows: ThemeShadows;\n  visualization: ThemeVisualizationColors;\n  transitions: ThemeTransitions;\n  v1: GrafanaTheme;\n}\n\n/**\n * @beta\n * Next gen theme model introduced in Grafana v8.\n */\ndeclare const theme2: GrafanaTheme2;\n\ninterface Threshold {\n  value: number;\n  color: string;\n  /**\n   *  Warning, Error, LowLow, Low, OK, High, HighHigh etc\n   */\n  state?: string;\n}\n\n/**\n *  Display mode\n */\ndeclare enum ThresholdsMode {\n  Absolute = "absolute",\n  /**\n   *  between 0 and 1 (based on min/max)\n   */\n  Percentage = "percentage",\n}\n\n/**\n *  Config that is passed to the ThresholdsEditor\n */\ninterface ThresholdsConfig {\n  mode: ThresholdsMode;\n  /**\n   *  Must be sorted by \'value\', first value is always -Infinity\n   */\n  steps: Threshold[];\n}\n\ninterface DateTimeBuiltinFormat {\n  __momentBuiltinFormatBrand: any;\n}\ndeclare const ISO_8601: DateTimeBuiltinFormat;\ndeclare type DateTimeInput =\n  | Date\n  | string\n  | number\n  | Array<string | number>\n  | DateTime\n  | null;\ndeclare type FormatInput = string | DateTimeBuiltinFormat | undefined;\ndeclare type DurationInput = string | number | DateTimeDuration;\ndeclare type DurationUnit =\n  | "year"\n  | "years"\n  | "y"\n  | "month"\n  | "months"\n  | "M"\n  | "week"\n  | "weeks"\n  | "w"\n  | "day"\n  | "days"\n  | "d"\n  | "hour"\n  | "hours"\n  | "h"\n  | "minute"\n  | "minutes"\n  | "m"\n  | "second"\n  | "seconds"\n  | "s"\n  | "millisecond"\n  | "milliseconds"\n  | "ms"\n  | "quarter"\n  | "quarters"\n  | "Q";\ninterface DateTimeLocale {\n  firstDayOfWeek: () => number;\n}\ninterface DateTimeDuration {\n  asHours: () => number;\n  hours: () => number;\n  minutes: () => number;\n  seconds: () => number;\n  asSeconds: () => number;\n}\ninterface DateTime extends Object {\n  add: (amount?: DateTimeInput, unit?: DurationUnit) => DateTime;\n  set: (unit: DurationUnit, amount: DateTimeInput) => void;\n  diff: (\n    amount: DateTimeInput,\n    unit?: DurationUnit,\n    truncate?: boolean\n  ) => number;\n  endOf: (unitOfTime: DurationUnit) => DateTime;\n  format: (formatInput?: FormatInput) => string;\n  fromNow: (withoutSuffix?: boolean) => string;\n  from: (formaInput: DateTimeInput) => string;\n  isSame: (input?: DateTimeInput, granularity?: DurationUnit) => boolean;\n  isBefore: (input?: DateTimeInput) => boolean;\n  isValid: () => boolean;\n  local: () => DateTime;\n  locale: (locale: string) => DateTime;\n  startOf: (unitOfTime: DurationUnit) => DateTime;\n  subtract: (amount?: DateTimeInput, unit?: DurationUnit) => DateTime;\n  toDate: () => Date;\n  toISOString: () => string;\n  isoWeekday: (day?: number | string) => number | string;\n  valueOf: () => number;\n  unix: () => number;\n  utc: () => DateTime;\n  utcOffset: () => number;\n  hour?: () => number;\n  minute?: () => number;\n}\n\ninterface RawTimeRange {\n  from: DateTime | string;\n  to: DateTime | string;\n}\n\ninterface TimeRange {\n  from: DateTime;\n  to: DateTime;\n  raw: RawTimeRange;\n}\n\ndeclare type TimeZoneUtc = \'utc\';\ndeclare type TimeZoneBrowser = \'browser\';\ndeclare type TimeZone = TimeZoneBrowser | TimeZoneUtc | string;\n\ndeclare enum MappingType {\n  ValueToText = 1,\n  RangeToText = 2,\n}\ninterface BaseMap {\n  id: number;\n  text: string;\n  type: MappingType;\n}\ndeclare type ValueMapping = ValueMap | RangeMap;\ninterface ValueMap extends BaseMap {\n  value: string;\n}\ninterface RangeMap extends BaseMap {\n  from: string;\n  to: string;\n}\n\ndeclare const htmlGraphics: {\n  codeData: typeof codeData;\n  customProperties: typeof customProperties;\n  data: typeof data;\n  getLocationSrv: typeof getLocationSrv;\n  getTemplateSrv: typeof getTemplateSrv;\n  htmlNode: typeof htmlNode;\n  options: typeof options;\n  theme: typeof theme;\n  theme2: typeof theme2;\n  props: PanelProps<OptionsInterface>;\n  width: number;\n  height: number;\n  getFieldDisplayValues: (options: PopulatedGetFieldDisplayValuesOptions) => FieldDisplay[];\n  fieldDisplayValues: FieldDisplay[];\n  fieldReducers: Registry<FieldReducerInfo>;\n};\n'}}]);
//# sourceMappingURL=0.js.map